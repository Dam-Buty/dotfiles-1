" -----------------------------------------------------------------------------
"                                   .vimrc
" -----------------------------------------------------------------------------

"                                  PLUGINS
"                                  =======

filetype off
call plug#begin('~/.vim/plugged')

Plug 'itchyny/lightline.vim'
Plug 'chriskempson/base16-vim'
Plug 'pangloss/vim-javascript'
Plug 'Raimondi/delimitMate'
Plug 'SirVer/ultisnips'
Plug '42Zavattas/vim-snippets', { 'branch': 'develop' }
Plug 'ctrlpvim/ctrlp.vim'
Plug 'airblade/vim-gitgutter'
Plug 'mxw/vim-jsx'
Plug 'mattn/emmet-vim', { 'for': 'javascript' }
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'sbdchd/neoformat'
Plug 'w0rp/ale'

call plug#end()
filetype plugin indent on

"                                  MAPPING
"                                  =======

let mapleader="-"

" dvorak buffer navigation
nnoremap <Space> <NOP>
nmap <silent> <Space>h :wincmd h<CR>
nmap <silent> <Space>t :wincmd j<CR>
nmap <silent> <Space>n :wincmd k<CR>
nmap <silent> <Space>s :wincmd l<CR>

" paste & select pasted text
noremap <Leader>p p`[v`]
noremap <Leader>P P`[v`]

" select pasted text, without first line (useful for re-indenting callbacks)
nnoremap <Leader>l `[v`]Oj

" select line from first non-blank char to last char
nnoremap <Leader>m ^vg_

" grep in current project & navigate in results
" use silver searcher if possible
command -nargs=+ -complete=file -bar Grep silent! grep! "<args>" | cwindow | redraw!
nnoremap \ :Grep<SPACE>
vnoremap \ y:Grep<SPACE><C-R><C-0><CR>
nnoremap <Leader>n :cnext<CR>
nnoremap <Leader>t :cprevious<CR>
nnoremap <Leader>q :ccl<CR>
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif

" indent { / [ / ( & put cursor on blank line when <Enter> inside
inoremap {<cr> {<cr>}<c-o>O
inoremap [<cr> [<cr>]<c-o>O
inoremap (<cr> (<cr>)<c-o>O

command Sp set paste
command Np set nopaste

"                                  SETTINGS
"                                  ========

" different cursors based on modes
let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
let &t_SI .= "\<Esc>[5 q"
let &t_SR .= "\<Esc>[4 q"
let &t_EI .= "\<Esc>[3 q"

" need explanation ?
syntax on

" the chosen one
colorscheme base16-ocean
set background=dark

set mouse=c

" encoding, etc.
set encoding=utf-8
set termencoding=utf-8

" correct strange bug
set backspace=indent,eol,start

" insert space characters whenever <tab> is pressed
set expandtab

" number of spaces inserted when hitting <tab>
set tabstop=2

" number of spaces inserted when using :retab
set shiftwidth=2

" don't wrap long lines
set nowrap

" always show status bar
set laststatus=2

" number of lines to keep above & below cursor when scrolling
set sidescrolloff=15
set sidescroll=1

" auto reload files when changed
set autoread

" show the 80 chars column
set colorcolumn=80

" don't create useless files
set noswapfile
set nobackup
set nowb

" hide unsaved buffers
set hidden

" show cursor line
set cursorline

" move on search
set incsearch

" show line numbers
set relativenumber
set number

" show infos in status bar
set ruler

" prevent annoying highlight on search
set nohlsearch

" more intelligent searches
set ignorecase
set smartcase

" never use Ex useless mode
nnoremap Q <ESC>

" show blank characters
set listchars=tab:>-,trail:·,nbsp:%
set list

" transparent bg
hi Normal ctermbg=NONE

" wild menu completion
set wildmode=longest,full
set wildignore=*.o,*.obj,*~
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=*node_modules*
set wildignore+=*ios/*
set wildignore+=yarn.lock
set wildignore+=*android/*
set wildignore+=*bower_components*
set wildignore+=*plugins*
set wildignore+=*platforms*
set wildignore+=*release*
set wildignore+=*dist*,*dist-server*,*lib*
set wildmenu

" indentation by language
autocmd Filetype go setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4

" quickfix split
autocmd! FileType qf nnoremap <buffer> <leader><Enter> <C-w><Enter><C-w>L

" neoformat
let g:neoformat_javascript_prettier = {
\   'exe': 'prettier',
\   'args': [
\     '--print-width 100',
\     '--single-quote',
\     '--trailing-comma all',
\     '--no-semi'
\   ],
\ }
let g:neoformat_enabled_javascript = ['prettier']
autocmd! BufWritePre * Neoformat

" display extra spaces in red
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" resize panels when client is resized
autocmd VimResized * :wincmd =

" disable xml different color for closing tag
highlight link xmlEndTag xmlTag

"                               PLUGINS CONFIG
"                               ==============

" lightline
let g:lightline = {
\   'colorscheme': 'jellybeans',
\   'active': {
\     'left': [ [ 'mode', 'paste' ], [ 'readonly', 'relativepath', 'modified' ] ],
\     'right': [ [ 'lineinfo' ] ]
\    },
\   'inactive': {
\     'left': [ ['relativepath' ] ],
\     'right': []
\    },
\ }

" ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" vim jsx
let g:jsx_ext_required = 0

" nerdcommenter
let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDDefaultAlign = 'left'

" emmet
let g:user_emmet_install_global = 0
let g:user_emmet_settings = {
\  'javascript.jsx' : {
\    'extends' : 'jsx',
\  },
\}
autocmd FileType javascript.jsx EmmetInstall

" vim-go
let g:go_fmt_command = "goimports"

" ale
let g:ale_linters = { 'javascript': ['eslint'] }
let g:ale_sign_error = '✖'
let g:ale_sign_warning = 'ℹ'
